import{_ as e,c as o,o as a,a4 as n}from"./chunks/framework.DpC1ZpOZ.js";const b=JSON.parse('{"title":"Organización de alto nivel","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/modules/organization.md","filePath":"architecture/modules/organization.md"}'),i={name:"architecture/modules/organization.md"},r=n('<h1 id="organizacion-de-alto-nivel" tabindex="-1">Organización de alto nivel <a class="header-anchor" href="#organizacion-de-alto-nivel" aria-label="Permalink to &quot;Organización de alto nivel&quot;">​</a></h1><h2 id="¿que-es-un-modulo" tabindex="-1">¿Qué es un módulo? <a class="header-anchor" href="#¿que-es-un-modulo" aria-label="Permalink to &quot;¿Qué es un módulo?&quot;">​</a></h2><p>Un módulo se define como la unidad completa de un producto, que abarca tanto el backend como el frontend del mismo. Cada módulo es autosuficiente y puede ser desarrollado, desplegado y mantenido de manera independiente. La separación del módulo en diferentes repositorios permite una mejor organización y manejo del código, facilitando la colaboración entre equipos y la implementación de estrategias de despliegue específicas para cada componente.</p><h2 id="¿como-debo-organizarlo" tabindex="-1">¿Cómo debo organizarlo? <a class="header-anchor" href="#¿como-debo-organizarlo" aria-label="Permalink to &quot;¿Cómo debo organizarlo?&quot;">​</a></h2><p>Desde un nivel técnico, un módulo debería estructurarse de la siguiente manera:</p><ul><li><p><strong>Repositorio de Backend</strong>: Contendrá toda la lógica del servidor, incluyendo controladores, servicios, modelos de datos y cualquier otra funcionalidad relacionada con la gestión de datos y la lógica de negocio. Este repositorio puede incluir un API RESTful, integraciones con bases de datos, y cualquier otro servicio necesario para el funcionamiento del producto como un Worker para tareas asíncronicas.</p></li><li><p><strong>Repositorio de Frontend</strong>: Este repositorio estará dedicado a la interfaz de usuario del módulo, que podría ser una aplicación web, móvil o de escritorio. Contendrá el código fuente de la UI, incluyendo componentes, estilos, y lógica de presentación. Aquí también se manejarán las integraciones con el backend a través de APIs.</p></li></ul><h2 id="convenciones-de-repositorios" tabindex="-1">Convenciones de repositorios <a class="header-anchor" href="#convenciones-de-repositorios" aria-label="Permalink to &quot;Convenciones de repositorios&quot;">​</a></h2><h3 id="nomenclatura-de-nombres" tabindex="-1">Nomenclatura de nombres <a class="header-anchor" href="#nomenclatura-de-nombres" aria-label="Permalink to &quot;Nomenclatura de nombres&quot;">​</a></h3><p>Para mantener una estructura clara y organizada en el manejo de los repositorios, es importante seguir una convención de nomenclatura consistente. La nomenclatura sugerida es:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">célula.módulo.componente</span></span></code></pre></div><p>Por ejemplo, si estuviéramos desarrollando el backend de un módulo llamado Collect podría nombrarse <code>gt.collect.backend</code>.</p><p><strong>Célula (gt)</strong>: El prefijo representa la célula o equipo responsable del desarrollo del módulo. Esto facilita la identificación de qué equipo se encarga del mantenimiento y desarrollo del repositorio.</p><p><strong>Módulo (collect)</strong>: Este segmento indica el nombre del módulo o producto. Debería ser lo suficientemente descriptivo como para identificar claramente el propósito o la funcionalidad principal del módulo.</p><p><strong>Componente (backend)</strong>: Este sufijo describe el tipo de componente que el repositorio alberga. Puede ser &quot;backend&quot; para indicar que contiene la lógica del servidor, APIs, integraciones con bases de datos, y servicios asíncronos como Workers. Otros ejemplos pueden ser &quot;frontend&quot;, &quot;mobile&quot;, &quot;database&quot;, etc.</p><p>Al seguir esta convención, los repositorios serán fáciles de identificar y entender en cuanto a su propósito, facilitando la colaboración y el mantenimiento a lo largo del ciclo de vida del proyecto.</p>',15),t=[r];function s(l,d,c,u,p,m){return a(),o("div",null,t)}const h=e(i,[["render",s]]);export{b as __pageData,h as default};
