import{o as i,c as r,j as e,I as o,a4 as s}from"./chunks/framework.DpC1ZpOZ.js";const c="/assets/clean-architecture.wjYHHaug.png",l={class:"video-container"},d=["src"],u={__name:"VideoViewer",props:{videoId:{type:String,required:!0}},setup(a){return(t,n)=>(i(),r("div",l,[e("iframe",{width:"560",height:"315",src:`https://www.youtube.com/embed/${a.videoId}`,frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,8,d)]))}},h=s('<h1 id="clean-architecture" tabindex="-1">Clean Architecture <a class="header-anchor" href="#clean-architecture" aria-label="Permalink to &quot;Clean Architecture&quot;">​</a></h1><h2 id="¿que-es-una-arquitectura-limpia" tabindex="-1">¿Qué es una arquitectura limpia? <a class="header-anchor" href="#¿que-es-una-arquitectura-limpia" aria-label="Permalink to &quot;¿Qué es una arquitectura limpia?&quot;">​</a></h2><p>Podemos definir la Clean Architecture como una filosofía de diseño que separa elementos y/o responsabilidades en distintos escenarios, basándose en el concepto de <code>separation of concerns</code>. Esto hace hincapié en que las distintas partes de la aplicación deberían tener responsabilidades definidas y tienen que ser independientes una de otras, permitiéndonos que cada componente pueda ser desarrollado, testeado y modificado sin afectarse entre sí, ofreciendo un código más robusto y mantenible.</p><p>El gráfico que vamos a encontrarnos típicamente es el de anillos, donde cada anillo representa una capa de nuestra aplicación.</p><p><img src="'+c+'" alt="Gráfico demostrativo de una arquitectura limpia" loading="lazy"></p><h2 id="domain" tabindex="-1">Domain <a class="header-anchor" href="#domain" aria-label="Permalink to &quot;Domain&quot;">​</a></h2><p>Es el corazón de nuestra aplicación donde se almacenan las entidades y el núcleo de la lógica y reglas de negocio. Esta capa no puede tener conocimiento externo.</p><h3 id="¿que-archivos-suelen-ir-dentro-de-esta-capa" tabindex="-1">¿Qué archivos suelen ir dentro de esta capa? <a class="header-anchor" href="#¿que-archivos-suelen-ir-dentro-de-esta-capa" aria-label="Permalink to &quot;¿Qué archivos suelen ir dentro de esta capa?&quot;">​</a></h3><ul><li>Entidades de base de datos.</li><li>Eventos de dominio.</li><li>Reglas de negocio.</li><li>Interfaces de Repository, Services, entre otros.</li><li>Mensajes y/o códigos de error.</li><li>Excepciones.</li></ul><h2 id="application" tabindex="-1">Application <a class="header-anchor" href="#application" aria-label="Permalink to &quot;Application&quot;">​</a></h2><p>La capa que actua como intermediario entre la capa de Dominio y la capa de Presentación, la cual contiene los casos de uso de nuestro negocio.</p><h3 id="¿que-archivos-suelen-ir-dentro-de-esta-capa-1" tabindex="-1">¿Qué archivos suelen ir dentro de esta capa? <a class="header-anchor" href="#¿que-archivos-suelen-ir-dentro-de-esta-capa-1" aria-label="Permalink to &quot;¿Qué archivos suelen ir dentro de esta capa?&quot;">​</a></h3><ul><li>Casos de uso.</li><li>Pipelines Behaviors.</li><li>Implementación de patrones de estrategia, contexto, entre otros.</li></ul><h2 id="presentation" tabindex="-1">Presentation <a class="header-anchor" href="#presentation" aria-label="Permalink to &quot;Presentation&quot;">​</a></h2><p>Responsable de manejar las interacciones del usuario y mostrarle la información que solicita. Normalmente suele ser una interface de usuario o los endpoints de una API. Esta actua con la capa de Application para obtener la información necesaria y transformándola antes de enviársela al usuario de vuelta.</p><h3 id="¿que-archivos-suelen-ir-dentro-de-esta-capa-2" tabindex="-1">¿Qué archivos suelen ir dentro de esta capa? <a class="header-anchor" href="#¿que-archivos-suelen-ir-dentro-de-esta-capa-2" aria-label="Permalink to &quot;¿Qué archivos suelen ir dentro de esta capa?&quot;">​</a></h3><ul><li>Middlewares.</li><li>Autenticación.</li><li>Interface de usuario, controllers u otros estilos de presentación.</li></ul><h2 id="infrastructure" tabindex="-1">Infrastructure <a class="header-anchor" href="#infrastructure" aria-label="Permalink to &quot;Infrastructure&quot;">​</a></h2><p>Es quien está a cargo de todas las conexiones con entes externos. Aquí yacen todas las configuraciones de, por ejemplo, los HttpClients encargados de realizar una petición a una API.</p><h3 id="¿que-archivos-suelen-ir-dentro-de-esta-capa-3" tabindex="-1">¿Qué archivos suelen ir dentro de esta capa? <a class="header-anchor" href="#¿que-archivos-suelen-ir-dentro-de-esta-capa-3" aria-label="Permalink to &quot;¿Qué archivos suelen ir dentro de esta capa?&quot;">​</a></h3><ul><li>Configuración para conexiones externas como: HttpClients, gRPC, entre otros.</li><li>Services.</li><li>Publishers de eventos.</li><li>Messages handlers.</li></ul><h2 id="persistence" tabindex="-1">Persistence <a class="header-anchor" href="#persistence" aria-label="Permalink to &quot;Persistence&quot;">​</a></h2><p>Proporciona el acceso a la base de datos, almacenando la configuración de las entidades, el DbContext y las migraciones de nuestra aplicación.</p><h3 id="¿que-archivos-suelen-ir-dentro-de-esta-capa-4" tabindex="-1">¿Qué archivos suelen ir dentro de esta capa? <a class="header-anchor" href="#¿que-archivos-suelen-ir-dentro-de-esta-capa-4" aria-label="Permalink to &quot;¿Qué archivos suelen ir dentro de esta capa?&quot;">​</a></h3><ul><li>Configuración de entidades de base de datos.</li><li>DbContexts.</li><li>Repositorios.</li><li>Interceptors.</li><li>Migrations.</li></ul><h3 id="contracts" tabindex="-1">Contracts <a class="header-anchor" href="#contracts" aria-label="Permalink to &quot;Contracts&quot;">​</a></h3><p>Actúa como un baúl de clases que cumplen diversos objetivos y pueden ser compartidos entre capas, pero que no tienen la suficiente responsabilidad como una entidad de base de datos. En estos ejemplos pueden entrar clases de tipo Request y Response.</p><h4 id="¿que-archivos-suelen-ir-dentro-de-esta-capa-5" tabindex="-1">¿Qué archivos suelen ir dentro de esta capa? <a class="header-anchor" href="#¿que-archivos-suelen-ir-dentro-de-esta-capa-5" aria-label="Permalink to &quot;¿Qué archivos suelen ir dentro de esta capa?&quot;">​</a></h4><ul><li>Clases que sean una respuesta o consulta.</li></ul><h2 id="sintesis" tabindex="-1">Sintesis <a class="header-anchor" href="#sintesis" aria-label="Permalink to &quot;Sintesis&quot;">​</a></h2><p>Como mencionamos antes, la clave es brindar al desarrollador componentes independientes e intercambiables. Por ejemplo, podemos cambiar el motor de base de datos o el ORM en la capa de <a href="./clean-architecture.html#persistence">Persistence</a> sin afectar a <a href="./clean-architecture.html#domain">Domain</a> o <a href="./clean-architecture.html#application">Application</a>.</p><p>Similarmente, podríamos modificar nuestra capa de <a href="./clean-architecture.html#presentation">Presentation</a> cambiando de una API a un Worker, sin modificar la lógica de negocio core de nuestro aplicativo, alojado en <a href="./clean-architecture.html#domain">Domain</a>.</p><p>Este <code>separation of concerns</code> hace que la testeabilidad de nuestra aplicación sea más sencilla ya que cada capa puede ser testeada independientemente utilizando <code>Unit Tests</code> o <code>Intergration Tests</code> brindándonos tests más enfocados y granulados aumentando el test coverage.</p><h2 id="referencias" tabindex="-1">Referencias <a class="header-anchor" href="#referencias" aria-label="Permalink to &quot;Referencias&quot;">​</a></h2><h3 id="clean-architecture-with-asp-net-core-3-0-•-jason-taylor-•-goto-2019" tabindex="-1">Clean Architecture with ASP.NET Core 3.0 • Jason Taylor • GOTO 2019 <a class="header-anchor" href="#clean-architecture-with-asp-net-core-3-0-•-jason-taylor-•-goto-2019" aria-label="Permalink to &quot;Clean Architecture with ASP.NET Core 3.0 • Jason Taylor • GOTO 2019&quot;">​</a></h3>',35),p=e("ul",null,[e("li",null,[e("a",{href:"https://semihtekin.medium.com/what-is-the-clean-architecture-c80c2a2ff69a",target:"_blank",rel:"noreferrer"},"What is the Clean Architecture?")]),e("li",null,[e("a",{href:"https://www.milanjovanovic.tech/blog/building-your-first-use-case-with-clean-architecture",target:"_blank",rel:"noreferrer"},"Milan Jovanović - Building Your First Use Case With Clean Architecture")])],-1),b=JSON.parse('{"title":"Clean Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/clean-architecture.md","filePath":"architecture/clean-architecture.md"}'),m={name:"architecture/clean-architecture.md"},q=Object.assign(m,{setup(a){return(t,n)=>(i(),r("div",null,[h,o(u,{videoId:"dK4Yb6-LxAk"}),p]))}});export{b as __pageData,q as default};
